<?xml version="1.0" encoding="utf-8"?>
<merger version="3"><dataSet config="main$Generated" generated="true"><source path="G:\BottomTabDemo\app\src\main\res"/><source path="G:\BottomTabDemo\app\build\generated\res\rs\debug"/><source path="G:\BottomTabDemo\app\build\generated\res\resValues\debug"/></dataSet><dataSet config="debug$Generated" generated="true"><source path="G:\BottomTabDemo\app\src\debug\res"/></dataSet><dataSet config="main" generated-set="main$Generated"><source path="G:\BottomTabDemo\app\src\main\res"><file name="ic_launcher" path="G:\BottomTabDemo\app\src\main\res\drawable-hdpi\ic_launcher.png" qualifiers="hdpi-v4" type="drawable"/><file name="ic_launcher" path="G:\BottomTabDemo\app\src\main\res\drawable-mdpi\ic_launcher.png" qualifiers="mdpi-v4" type="drawable"/><file name="btn_know_nor" path="G:\BottomTabDemo\app\src\main\res\drawable-xhdpi\btn_know_nor.png" qualifiers="xhdpi-v4" type="drawable"/><file name="btn_know_pre" path="G:\BottomTabDemo\app\src\main\res\drawable-xhdpi\btn_know_pre.png" qualifiers="xhdpi-v4" type="drawable"/><file name="btn_my_nor" path="G:\BottomTabDemo\app\src\main\res\drawable-xhdpi\btn_my_nor.png" qualifiers="xhdpi-v4" type="drawable"/><file name="btn_my_pre" path="G:\BottomTabDemo\app\src\main\res\drawable-xhdpi\btn_my_pre.png" qualifiers="xhdpi-v4" type="drawable"/><file name="btn_wantknow_nor" path="G:\BottomTabDemo\app\src\main\res\drawable-xhdpi\btn_wantknow_nor.png" qualifiers="xhdpi-v4" type="drawable"/><file name="btn_wantknow_pre" path="G:\BottomTabDemo\app\src\main\res\drawable-xhdpi\btn_wantknow_pre.png" qualifiers="xhdpi-v4" type="drawable"/><file name="ic_launcher" path="G:\BottomTabDemo\app\src\main\res\drawable-xhdpi\ic_launcher.png" qualifiers="xhdpi-v4" type="drawable"/><file name="zhidao_logo" path="G:\BottomTabDemo\app\src\main\res\drawable-xhdpi\zhidao_logo.png" qualifiers="xhdpi-v4" type="drawable"/><file name="ic_launcher" path="G:\BottomTabDemo\app\src\main\res\drawable-xxhdpi\ic_launcher.png" qualifiers="xxhdpi-v4" type="drawable"/><file name="activity_main" path="G:\BottomTabDemo\app\src\main\res\layout\activity_main.xml" qualifiers="" type="layout"/><file name="main_tab1_fragment" path="G:\BottomTabDemo\app\src\main\res\layout\main_tab1_fragment.xml" qualifiers="" type="layout"/><file name="main_tab2_fragment" path="G:\BottomTabDemo\app\src\main\res\layout\main_tab2_fragment.xml" qualifiers="" type="layout"/><file name="main_tab3_fragment" path="G:\BottomTabDemo\app\src\main\res\layout\main_tab3_fragment.xml" qualifiers="" type="layout"/><file name="main" path="G:\BottomTabDemo\app\src\main\res\menu\main.xml" qualifiers="" type="menu"/><file path="G:\BottomTabDemo\app\src\main\res\values\colors.xml" qualifiers=""><color name="topbar_bg">#d5c2c2</color><color name="line">#c8bca5</color><color name="bottomtab_press">#8b572a</color><color name="bottomtab_normal">#c8bca5</color></file><file path="G:\BottomTabDemo\app\src\main\res\values\dimens.xml" qualifiers=""><dimen name="activity_vertical_margin">16dp</dimen><dimen name="activity_horizontal_margin">16dp</dimen></file><file path="G:\BottomTabDemo\app\src\main\res\values\strings.xml" qualifiers=""><string name="hello_world">Hello world!</string><string name="zhuanye">
                   1 . 熟练掌握图片处理框架，Picasso，Glide的使用
                   2 . 熟练掌握MVC和MVP模式。
                   3 . 熟练掌握Android自定义控件。
                   4 . 熟练掌握Android下的XML，JSON的解析，熟练掌握各种数据的存储方式。
                   5. 熟练掌握Android下的Handler和AsyncTask处理异步请求操作。
                   6 . 熟练处理Android中的OOM、ANR异常。
                   7. 熟悉图片的缓存技术、常用的优化方式、大图片处理，三级缓存。
                   8. 熟悉android手机屏幕适配及屏幕适配的原则，提高应用的兼容性
                   9. 掌握APP应用开发框架结构的基本搭建，抽取activity,fragment,adapter，holder等公用代码熟悉                        能够将常见的设计模式，工厂模式，观察者模式，单列模式运用到App中
                 10.熟练掌握Token在Android下的使用
                 11.熟悉Android下网络通信技术，对Socket通信、Http、Https有一定的了解
                 12.熟悉Android下ButterKnife ， EventBus，OKhttp等框架和第三方登录，shareSDK分享。


</string><string name="action_settings">Settings</string><string name="app_name">BottomTabDemo</string><string name="bottom_tab_know">个人资料</string><string name="bottom_tab_wantknow">求职意向</string><string name="haitun">
1. 由于很多Activity都使用了相同的菜单栏和底部导航栏，且大多Acitvity都需要与服务器交互，使用模板方式将顶部菜单栏和与底部导航栏与服务器交互的方法封装在一个BaseActivity中，其他Activity只需继承它就能实现这些方法，大大减少了重复代码的出现。
2. 使用okhttp向服务器发送数据请求,使用Gson,解析从服务器返回的所有信息数据
3.因为项目中大量用到与服务器刷新的界面，为了提高用户的体验，在与服务器交互的子线程未完成之前，先显示加载进度条，当成功获取服务器数据以后再显示数据。
4. 在加载商品时候，为了不影响用户体验，采用异步加载的方式加载图片，商品显示的时候把RecyclerView进行优化，在适配器中复用convertview，安卓还提供了一个Recycler的构件，然后使用这个控件。
5. 查询商品时通过RecyclerView上拉加载下拉刷新框架实现分批加载数据，优化了用户的体验。
6. 根据传递参数type值的不同,显示不同时期的订单。
7. 关于订单页面可以直接采用RecyclerView嵌套RecyclerView的方式 ，通过handler+message消息机制 实现子线程与UI线程间通讯。
8. 对于分辨率过大的图片可以操作BitmapFactory.Options类，先加载图片的宽高,不加载内容. 再获取手机屏幕大小进 行对比, 然后通过对比值设置加载指定宽高解决
9. 商品详情页使用二个scrollView，通过自定义viewGroup来控制两个scrollView的竖直排列，以及滑动事件的处理
10.使用了ButterKnife 注解绑定获取控件功能，图片加载使用了Picasso
</string><string name="weikang">
1.全部使用ViewUtils进行控件绑定及事件的注入.在购物车模块业务功能比较复杂,定义4个接口回调,一个用来刷新总金额,一个用来刷新勾选中的商品总金额, 一个用来刷新底部按钮text,在编辑页面可以编辑商品数量与删除勾选商品. 在编辑页面所做的操作都要调用接口回调方法来刷新页面数据.
2.购物车还有匿名加入购物车功能, 加入购物车时判断是否登录,如果未登录就把当前数据存入sqlite数据库中.点击结算在进入登录界面,登录成功后把本地数据库中数据添加到该用户购物车中,然后删掉本地中数据.
3.在商品收货成功后,进入待评价页面可以对商品服务评价及该订单商品评价及晒图.在待评价中将该订单使用Gson框架使用intent携带到评价晒单页面做显示.自定义RatingBar做为五角星打分控件.评价晒图将选中图片进行Base64编译后使用post携带到服务器.
4.因为项目中大量用到与服务器刷新的界面，为了提高用户的体验，在与服务器交互的子线程未完之前，先显示加载进度条，当成功获取服务器数据以后再显示数据。
5.联系客服打电话 打开QQ 微信将内容复制到剪切板 启动邮箱等功能使用intent意图激活即可, 下载二维码到本地 使用IO流向本地相册写入后图片后, 打开手机保存的二维码图片不会即使显示出来,使用MediaScannerConnection刷新相册即可.
6.商品评价详情页面含分页功能每次请求20条评价数据,使用RecyclerView上拉加载下拉刷新框架,展示用户所晒图使用SmartImageView显示 在下拉刷新时会出现图片闪动效果,解决此办法可以使用ImageLoader框架,自带缓存.可以帮助用户节省流量.
 7．使用ViewDragHelper，滑动比较流畅。scrollView有一个弹性的动画效果当滑动到下面的布局时候同时下面的布局依然可以滑动，所以我们自定义一个View来包含两个Scrollview；然后监听Scrollview滑动到底部添加动画效果让其滑动到下面的Scrollview，当下面的Scrollview滑动到顶部的时候再添加一个向上的动画让其滑动到上面Scrollview
 8. 购物车中把商品加入购物车中使用贝赛尔曲线，在起终点之间使用二次贝塞尔曲线填充起终点之间的点的轨迹，设置属性动画，ValueAnimator插值器，获取中间点的坐标，将执行动画的控件的x、y坐标设为上面得到的中间点坐标，开启属性动画，通过RecyclerView来显示商品的属性界面实现自定义的ViewGroup，重写onMeasure和onLayout方法，

</string><string name="bottom_tab_my">工作经验</string><string name="weishi">
1.定义一个抽象基类BaseActivity管理所有Activity。
2.定义抽象方法findViewById，loadViewLayout，后台获取数据(processLogic)，setListener，重新抓取数据(getTabAgain)返回子Activity索引(getTabIndex)等抽象方法。
3.这样等于定义一个模板代码，所有实现它的子类必须要实现这些方法，也就意味着其它项目组成员不能想怎么写就怎么写，因为没有统一的管理，代码的耦合度会比较高，后期    维护成本很大。定义了统一的方法之后，即使有人刚加入项目组也可以一目了然，比如看到findViewById方法，就知道所有的find控件的方法都写在这个方法里，这样整体的代码看起来比较整洁，容易看懂，也方便维护。
4.抽取公共模块封装到BaseActivity。
5.TitleBar，因为所有项目都要设置TitleBar，这个方法也是个公有方法，公有方法应该放在BasActivity基类里面，setTitleBar封装了对标题的动态控制，继承它的子类都不用再去写setTitleBar方法，也就意味着可以让子类省掉大量臃肿的代码，因为它都已经封装好在BaseActivity基类里面，这样可以节省开发时间成本。
6.抽取界面与服务器获取数据的公共方法，由于每个界面都需要与服务器进行交互，所以也需要放在基类里面。
7.封装HTTP请求模块。例如，所有的http请求都封装在一个类中，我并不知道其它项目组成员http请求的url

</string></file><file path="G:\BottomTabDemo\app\src\main\res\values\styles.xml" qualifiers=""><style name="AppTheme" parent="AppBaseTheme">
        
    </style><style name="AppBaseTheme" parent="android:Theme.Light">
        
    </style></file><file path="G:\BottomTabDemo\app\src\main\res\values-v11\styles.xml" qualifiers="v11"><style name="AppBaseTheme" parent="android:Theme.Holo.Light">
        
    </style></file><file path="G:\BottomTabDemo\app\src\main\res\values-v14\styles.xml" qualifiers="v14"><style name="AppBaseTheme" parent="android:Theme.Holo.Light.DarkActionBar">
        
    </style></file><file path="G:\BottomTabDemo\app\src\main\res\values-w820dp\dimens.xml" qualifiers="w820dp-v13"><dimen name="activity_horizontal_margin">64dp</dimen></file></source><source path="G:\BottomTabDemo\app\build\generated\res\rs\debug"/><source path="G:\BottomTabDemo\app\build\generated\res\resValues\debug"/></dataSet><dataSet config="debug" generated-set="debug$Generated"><source path="G:\BottomTabDemo\app\src\debug\res"/></dataSet><mergedItems/></merger>